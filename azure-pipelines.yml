name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yy)$(DayOfYear).$(BuildCounter)

parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    displayName: "Continue even if resources are getting destroyed"
    type: boolean
    default: false
  - name: disableStryker
    displayName: "Disable Stryker"
    type: boolean
    default: false

trigger:
  - main
  - release/*
  - develop

schedules:
- cron: "0 4 * * 1"
  displayName: "Weekly NVD Check Build"
  branches:
    include:
    - main
  always: true

pool: 
    name: NautilusBuild
    demands: vs_16 -equals 1 #exclude agents 13 and 14 as code coverage report fails

variables:
  - name: BuildConfiguration
    value: "release"
  - name: BuildPlatform
    value: "any cpu"
  - name: BuildCounter
    value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
  - name: UKHOAssemblyCompany
    value: "UK Hydrographic Office"
  - name: UKHOAssemblyVersionPrefix
    value: "1.0."
  - name: UKHOAssemblyProduct
    value: "Exchange Set Service"
  - name: UKHOAssemblyCopyright
    value: "Copyright Â© UK Hydrographic Office"
  - name: Container
    value: "ukhydrographicoffice/terraform-azure-powershell-unzip:1.9.6"
  - name: DeploymentPool
    value: "Mare Nectaris"
  - name: SdkVersion
    value: "8.0.x"
  - name: WindowPool
    value: "NautilusBuild"

stages:
  - stage: Stryker_Mutator
    displayName: "Stryker Mutator"
    condition: ${{ eq(parameters.disableStryker, false) }}
    dependsOn: []
    jobs:
    - job: Stryker
      workspace:
        clean: all
      steps:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK'
          inputs:
            packageType: sdk
            version: $(SdkVersion)

        - task: UseDotNet@2
          displayName: 'Use .NET SDK for Stryker'
          inputs:
            packageType: sdk
            version: $(SdkVersion)

        - task: DotNetCoreCLI@2
          displayName: "Install Stryker"
          inputs:
            command: custom
            custom: tool
            workingDirectory: $(Agent.TempDirectory)
            arguments: install dotnet-stryker --tool-path $(Agent.BuildDirectory)/tools

        - task: Powershell@2
          displayName: "Run Stryker"
          inputs:
            workingDirectory: '$(Build.SourcesDirectory)\'
            targetType: 'inline'
            pwsh: true
            script: $(Agent.BuildDirectory)/tools/dotnet-stryker

        - task: PublishMutationReport@1
          displayName: 'Publish Stryker Mutator Report'
          inputs:
            reportPattern: '**/mutation-report.html'

  - stage: BuildTestPublish
    displayName: "Build, test and publish"
    dependsOn: []
    jobs:
    - template: Deployment/templates/build-test-publish.yml  
 
  - stage: Devdeploy
    dependsOn:
    - BuildTestPublish
    displayName: "Devdeploy (inc terraform, webapp deploy)"
    jobs:
      - template: Deployment/templates/app-deploy.yml
        parameters:
          Environment: "dev"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-Dev-A-008-02"
          Container: ${{variables.Container}} 
          RunTests: true

      - template: Deployment/templates/app-deploy.yml
        parameters:
          Environment: "dev"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-Dev-A-008-02"
          Container: ${{variables.Container}} 
          RunTests: false
          pathSuffix: "-v2"
          v2Modifier: "2"

  - stage: QCdeploy
    dependsOn:
    - BuildTestPublish
    displayName: "QCdeploy (inc terraform, mock webapp deploy)"
    jobs:
      - deployment: QCDeployApp
        displayName: "QC - deploy terraform and WebApps"
        environment: "Ess-Dev"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ESS-Deployment-Variables-DEV"
          - group: "ESS-Dev-Variables"
          - name: "ESSAzureADConfiguration.ClientId"
            value: $(ESSClientId)
          - name: "ESSAzureADConfiguration.TenantId"
            value: $(TenantId)
          - name: "EssAuthorizationConfiguration.TenantId"
            value: $(TenantId)
          - name: "EssAuthorizationConfiguration.AutoTestClientId"
            value: $(AutoTestClientId_Authed)
          - name: "EssAuthorizationConfiguration.AutoTestClientSecret"
            value: $(AutoTestClientSecret_Authed)
          - name: "EssAuthorizationConfiguration.EssClientId"
            value: $(ESSClientId)
          - name: "EssAuthorizationConfiguration.AutoTestClientIdNoAuth"
            value: $(AutoTestClientId_NoAuth)
          - name: "EssAuthorizationConfiguration.AutoTestClientSecretNoAuth"
            value: $(AutoTestClientSecret_NoAuth)
          - name: "AzureAdB2CTestConfiguration.ClientSecret"
            value: $(AUTOTEST-ESS-SECRET)
            #This variables are overridden since they are different from dev and we have used same library
          - name: "Environment"
            value: "qc"
          - name: "ESSFulfilmentConfiguration.SmallExchangeSetInstance"
            value: 1
          - name: "ESSFulfilmentConfiguration.MediumExchangeSetInstance"
            value: 1
          - name: "ESSFulfilmentConfiguration.LargeExchangeSetInstance"
            value: 1
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  submodules: recursive

                - template: MockApiDeployment/templates/mock-api-continuous-deployment.yml
                  parameters:
                    AzureSubscription: "Exchange-Set-Service-Dev-A-008-02"

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Functional test Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'functionaltests'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Terraform Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'terraformartifact'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: FileTransform@2
                  displayName: "File Transform: functionaltests"
                  inputs:
                    folderPath: '$(Build.SourcesDirectory)/functionaltests/'
                    enableXmlTransform: false
                    xmlTransformationRules: ''
                    jsonTargetFiles: '**/appsettings.json'

                - task: UseDotNet@2
                  displayName: 'Use .NET SDK'
                  inputs:
                    packageType: sdk
                    version: $(SdkVersion)

                - task: AzureCLI@2
                  displayName: "Swap ESS API and ESS FulfilmentService Configuration AIOEnabled"
                  condition: always()
                  inputs:
                    azureSubscription: "Exchange-Set-Service-Dev-A-008-02"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Build.SourcesDirectory)/terraformartifact/set_api_webjob_aio_feature_configuration.ps1"
                    arguments: '-aiocells $(AioConfiguration.AioCells_FT) -resourcegroup $(webAppResourceGroup) -webappname $(essWebAppName) -fulfilmentwebappsname $(essFulfilmentWebAppname)'

                - task: DotNetCoreCLI@2
                  displayName: "Run Functional tests"
                  inputs:
                    command: "test"
                    projects: |
                      **/*FunctionalTest*.dll
                      !**/*TestAdapter.dll
                      !**/obj/**
                    testRunTitle: "QC-AutomationTests"
                    workingDirectory: '$(Build.SourcesDirectory)/functionaltests'

                - task: AzureCLI@2
                  displayName: "Swap ESS API and ESS FulfilmentService Configuration"
                  condition: always()
                  inputs:
                    azureSubscription: "Exchange-Set-Service-Dev-A-008-02"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Build.SourcesDirectory)/terraformartifact/set_api_webjob_aio_feature_configuration.ps1"
                    arguments: '-aiocells $(AioConfiguration.AioCells) -resourcegroup $(webAppResourceGroup) -webappname $(essWebAppName) -fulfilmentwebappsname $(essFulfilmentWebAppname)'

  - stage: QAdeploy
    dependsOn:
    - Devdeploy
    - QCdeploy
    displayName: QAdeploy (inc terraform, webapp deploy)
    # condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: QADeployApp
        displayName: QA - deploy terraform and dotnet App
        environment: "Ess-Qa"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ESS-Deployment-Variables-QA"
          - group: "ESS-QA-Variables"
          - name: "ESSAzureADConfiguration.ClientId"
            value: $(ESSClientId)
          - name: "ESSAzureADConfiguration.TenantId"
            value: $(TenantId)
          - name: "EssAuthorizationConfiguration.TenantId"
            value: $(TenantId)
          - name: "EssAuthorizationConfiguration.AutoTestClientId"
            value: $(AutoTestClientId_Authed)
          - name: "EssAuthorizationConfiguration.AutoTestClientSecret"
            value: $(AutoTestClientSecret_Authed)
          - name: "EssAuthorizationConfiguration.EssClientId"
            value: $(ESSClientId)
          - name: "EssAuthorizationConfiguration.AutoTestClientIdNoAuth"
            value: $(AutoTestClientId_NoAuth)
          - name: "EssAuthorizationConfiguration.AutoTestClientSecretNoAuth"
            value: $(AutoTestClientSecret_NoAuth)
          - name: "AzureAdB2CTestConfiguration.ClientSecret"
            value: $(AUTOTEST-ESS-SECRET)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  submodules: recursive

                - template: Deployment/templates/continuous-deployment.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Exchange-Set-Service-QA-A-008-02"

                - template: Deployment/templates/continuous-deployment-apim.yml
                  parameters:
                     ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                     AzureSubscription: "UKHO-APIM-SOLAS-NonLive"
                     TerraformKeyVault: $(APIM_TERRAFORM_KEYVAULT)
                     APIMResourceGroup: $(APIM_RESOURCE_GROUP_NAME)
                     APIMServiceInstance: $(APIM_SERVICE_NAME)
                     tfstateStorageAccountName: $(APIM_TFSTATE_STORAGE_ACCOUNT_NAME)
                     
                - task: DownloadBuildArtifacts@0
                  displayName: "Download Functional test Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'functionaltests'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: DownloadBuildArtifacts@0
                  displayName: "Download Terraform Artifact"
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'terraformartifact'
                    downloadPath: '$(Build.SourcesDirectory)'

                - task: FileTransform@2
                  displayName: "File Transform: functionaltests"
                  inputs:
                    folderPath: '$(Build.SourcesDirectory)/functionaltests/'
                    enableXmlTransform: false
                    xmlTransformationRules: ''
                    jsonTargetFiles: '**/appsettings.json'

                - task: UseDotNet@2
                  displayName: 'Use .NET SDK'
                  inputs:
                    packageType: sdk
                    version: $(SdkVersion)

                - task: AzureCLI@2
                  displayName: "Swap ESS API and ESS FulfilmentService Configuration"
                  condition: always()
                  inputs:
                    azureSubscription: "Exchange-Set-Service-QA-A-008-02"
                    scriptType: 'pscore'
                    scriptLocation: 'scriptPath'
                    scriptPath: "$(Build.SourcesDirectory)/terraformartifact/set_api_webjob_aio_feature_configuration.ps1"
                    arguments: '-aiocells $(AioConfiguration.AioCells) -resourcegroup $(RESOURCE_GROUP_NAME) -webappname $(WEB_APP_NAME) -fulfilmentwebappsname $(fulfilmentWebAppsName)'

      - deployment: QADeployApp2
        dependsOn:
        - QADeployApp
        displayName: "QA - deploy terraform and dotnet App for FSS UI"
        environment: "Ess-Qa"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ESS-Deployment-Variables-QA"
          - group: "ESS-QA2-Variables"
          - name: "ESSAzureADConfiguration.ClientId"
            value: $(ESSClientId)
          - name: "ESSAzureADConfiguration.TenantId"
            value: $(TenantId)
          - name: "EssAuthorizationConfiguration.TenantId"
            value: $(TenantId)
          - name: "EssAuthorizationConfiguration.AutoTestClientId"
            value: $(AutoTestClientId_Authed)
          - name: "EssAuthorizationConfiguration.AutoTestClientSecret"
            value: $(AutoTestClientSecret_Authed)
          - name: "EssAuthorizationConfiguration.EssClientId"
            value: $(ESSClientId)
          - name: "EssAuthorizationConfiguration.AutoTestClientIdNoAuth"
            value: $(AutoTestClientId_NoAuth)
          - name: "EssAuthorizationConfiguration.AutoTestClientSecretNoAuth"
            value: $(AutoTestClientSecret_NoAuth)
          - name: "AzureAdB2CTestConfiguration.ClientSecret"
            value: $(AUTOTEST-ESS-SECRET)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  submodules: recursive

                - template: Deployment/templates/continuous-deployment-v2.yml
                  parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "Exchange-Set-Service-QA-A-008-02"

                - template: Deployment/templates/continuous-deployment-apim-v2.yml
                  parameters:
                     ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                     AzureSubscription: "UKHO-APIM-SOLAS-NonLive"
                     TerraformKeyVault: $(APIM_TERRAFORM_KEYVAULT)
                     APIMResourceGroup: $(APIM_RESOURCE_GROUP_NAME)
                     APIMServiceInstance: $(APIM_SERVICE_NAME)
                     tfstateStorageAccountName: $(APIM_TFSTATE_STORAGE_ACCOUNT_NAME)

      - job: Run_ADDS_E2E_tests
        displayName: Run ADDS E2E tests
        dependsOn: QADeployApp
        pool: $(DeploymentPool)
        variables:
          - group: "ADDS-E2E"
        container: ${{variables.Container}}
        steps:
        - task: PowerShell@2          
          displayName: "Run ADDS E2E pipeline tests"
          inputs:
              pwsh: true
              targetType: filePath
              filePath: '$(System.DefaultWorkingDirectory)/Deployment/ADDS-e2e-tests.ps1'
              arguments: '-queueSecret $(QueueSecret) -pollSecret $(PollSecret) -pollTimeInSecs $(PollTimeInSecs) -functionEndPoint $(FunctionEndPoint)'

  - stage: Livedeploy
    dependsOn:
    - QAdeploy
    displayName: Livedeploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - deployment: LiveDeployApp
        displayName: Live - deploy terraform and dotnet App
        environment: "Ess-Live"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ESS-Deployment-Variables-LIVE"
          - group: "ESS-Live-Variables"
          - name: "ESSAzureADConfiguration.ClientId"
            value: $(ESSClientId)
          - name: "ESSAzureADConfiguration.TenantId"
            value: $(TenantId)
        strategy:
         runOnce:
          deploy:
            steps:
              - template: Deployment/templates/continuous-deployment.yml
                parameters:
                  ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                  AzureSubscription: "Exchange-Set-Service-Live-A-008-02"

              - template: Deployment/templates/continuous-deployment-apim.yml
                parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "UKHO-APIM-SOLAS-Live"
                    TerraformKeyVault: $(APIM_TERRAFORM_KEYVAULT)
                    APIMResourceGroup: $(APIM_RESOURCE_GROUP_NAME)
                    APIMServiceInstance: $(APIM_SERVICE_NAME)
                    tfstateStorageAccountName: $(APIM_TFSTATE_STORAGE_ACCOUNT_NAME)

      - deployment: LiveDeployApp2
        dependsOn:
        - LiveDeployApp
        displayName: "Live - deploy terraform and dotnet App for FSS UI"
        environment: "Ess-Live"
        pool: $(DeploymentPool)
        container: ${{variables.Container}}
        workspace:
          clean: all
        variables:
          - group: "ESS-Deployment-Variables-LIVE"
          - group: "ESS-Live2-Variables"
          - name: "ESSAzureADConfiguration.ClientId"
            value: $(ESSClientId)
          - name: "ESSAzureADConfiguration.TenantId"
            value: $(TenantId)
        strategy:
         runOnce:
          deploy:
            steps:
              - template: Deployment/templates/continuous-deployment-v2.yml
                parameters:
                  ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                  AzureSubscription: "Exchange-Set-Service-Live-A-008-02"

              - template: Deployment/templates/continuous-deployment-apim-v2.yml
                parameters:
                    ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
                    AzureSubscription: "UKHO-APIM-SOLAS-Live"
                    TerraformKeyVault: $(APIM_TERRAFORM_KEYVAULT)
                    APIMResourceGroup: $(APIM_RESOURCE_GROUP_NAME)
                    APIMServiceInstance: $(APIM_SERVICE_NAME)
                    tfstateStorageAccountName: $(APIM_TFSTATE_STORAGE_ACCOUNT_NAME)

      - job: PostDeploymentActions
        dependsOn:
        - LiveDeployApp            
        - LiveDeployApp2 
        pool: $(WindowPool)        
        displayName: Post Deployment Actions
        steps:
          - template: Deployment/templates/retain-pipeline.yml

  - stage: vnextiatDeploy
    dependsOn:
      - Devdeploy
    displayName: vNext IAT Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/dev/')))
    jobs:
      - template: Deployment/templates/app-deploy.yml
        parameters:
          Environment: "vnextiat"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-vNext-IAT-A.011.08"
          Container: ${{variables.Container}}

  - stage: vnexte2eDeploy
    dependsOn: 
      - vnextiatDeploy
    displayName: vNext E2E Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    jobs:
      - template: Deployment/templates/app-deploy.yml
        parameters:
          Environment: "vnexte2e"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-vNext-E2E-A.011.08"
          Container: ${{variables.Container}}

  - stage: IatDeploy
    dependsOn: 
    - Devdeploy
    displayName: IAT Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - template: Deployment/templates/app-deploy.yml
        parameters:
          Environment: "iat"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-IAT-A.011.08"
          Container: ${{variables.Container}}

  - stage: PreProdDeploy
    dependsOn: 
    - IatDeploy
    displayName: PreProd Deploy (inc terraform, webapp deploy)
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    jobs:
      - template: Deployment/templates/app-deploy.yml
        parameters:
          Environment: "preprod"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-Pre-A.011.08"
          Container: ${{variables.Container}} 

      - template: Deployment/templates/app-deploy.yml
        parameters:
          Environment: "preprod"
          ContinueEvenIfResourcesAreGettingDestroyed: ${{ parameters.ContinueEvenIfResourcesAreGettingDestroyed }}
          AzureSubscription: "Exchange-Set-Service-Pre-A.011.08"
          Container: ${{variables.Container}} 
          RunTests: false
          pathSuffix: "-v2"
          v2Modifier: "2"
