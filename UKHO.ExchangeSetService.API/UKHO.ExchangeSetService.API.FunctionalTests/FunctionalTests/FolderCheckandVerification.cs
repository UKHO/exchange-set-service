using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using UKHO.ExchangeSetService.API.FunctionalTests.Helper;
using UKHO.ExchangeSetService.API.FunctionalTests.Models;

namespace UKHO.ExchangeSetService.API.FunctionalTests.FunctionalTests
{
    [TestFixture]
    [Parallelizable(ParallelScope.Self)]
    public class FolderCheckandVerification
    {
        private ExchangeSetApiClient ExchangeSetApiClient { get; set; }
        private TestConfiguration Config { get; set; }
        private DataHelper DataHelper { get; set; }
        private string EssJwtToken { get; set; }
        public ProductIdentifierModel ProductIdentifierModel { get; set; }

        [SetUp]
        public async Task SetupAsync()
        {
            Config = new TestConfiguration();
            ExchangeSetApiClient = new ExchangeSetApiClient(Config.EssBaseAddress);
            ProductIdentifierModel = new ProductIdentifierModel();
            AuthTokenProvider authTokenProvider = new AuthTokenProvider();
            EssJwtToken = await authTokenProvider.GetEssToken();
            DataHelper = new DataHelper();
        }


        /// <summary>
        /// Generate file path location
        /// </summary>
        /// <param name="homeDirectoryPath">Home directory</param>
        /// <param name="batchId">Batch Id generated by exchange set</param>
        /// <param name="countryCode">Country Code</param>
        /// <param name="productName">Product Name</param>
        /// <param name="editionNumberString">Edition Number</param>
        /// <param name="updateNumberString">Update Number</param>
        /// <returns></returns>
        public string GenerateFilePath(string homeDirectoryPath, string batchId, string countryCode, string productName, string editionNumberString, string updateNumberString)
        {
            var filePath = Path.Combine(homeDirectoryPath, DateTime.UtcNow.ToString("ddMMMyyyy"), batchId, Config.ExchangeSetFileFolder, Config.EncRootFolder, countryCode, productName, editionNumberString, updateNumberString);
            return filePath;
        }

        [Test]
        public async Task WhenICallTheApiWithAValidProductIdentifiers_ThenLatestDownloadedFolderExists()
        {
            var productName = "DE5NOBRK";
            var apiResponse = await ExchangeSetApiClient.GetProductIdentifiersDataAsync(new List<string>() { productName }, accessToken: EssJwtToken);
            Assert.AreEqual(200, (int)apiResponse.StatusCode, $"Incorrect status code is returned {apiResponse.StatusCode}, instead of the expected status 200.");



            var batchId = await apiResponse.GetBatchId();
            string homeDirectoryPath = Config.EncHomeFolder;

            int editionNumber = 1;
            string editionNumberString = editionNumber.ToString();

            int updateNumber = 0;
            string updateNumberString = updateNumber.ToString();

            string countryCode = productName.Substring(0, 2);
            var filePath = GenerateFilePath(homeDirectoryPath, batchId, countryCode, productName, editionNumberString, updateNumberString);

            int filesCount = await FolderCheck.CheckIfDownloadFolderExistAndFileCount(filePath);

            Assert.AreEqual(4, filesCount, $"File count returned from folder {filesCount}, instead of expected count 4");
        }

        [Test]
        public async Task WhenICallTheApiWithInvalidProductIdentifiers_ThenLatestDownloadedFolderDoesNotExist()
        {
            var productName = "GB123789";

            var apiResponse = await ExchangeSetApiClient.GetProductIdentifiersDataAsync(new List<string>() { productName }, accessToken: EssJwtToken);
            Assert.AreEqual(200, (int)apiResponse.StatusCode, $"Incorrect status code is returned {apiResponse.StatusCode}, instead of the expected status 200.");


            var batchId = await apiResponse.GetBatchId();
            string homeDirectoryPath = Config.EncHomeFolder;

            string countryCode = productName.Substring(0, 2);

            var filePath = Path.Combine(homeDirectoryPath, DateTime.UtcNow.ToString("ddMMMyyyy"), batchId, Config.ExchangeSetFileFolder, Config.EncRootFolder, countryCode, productName);


            bool folderCheck = await FolderCheck.CheckIfDownloadFolderNotExist(filePath);

            Assert.False(folderCheck, $"Folder available for the product {productName}");
        }


        [Test]
        public async Task WhenICallTheApiWithAValidProductVersion_ThenLatestDownloadedFolderExists()
        {
            List<ProductVersionModel> ProductVersionData = new List<ProductVersionModel>();
            var productName = "DE5NOBRK";

            int editionNumber = 1;
            string editionNumberString = editionNumber.ToString();

            int updateNumber = 0;
            
            ProductVersionData.Add(DataHelper.GetProductVersionModelData(productName, editionNumber, updateNumber));

            var apiResponse = await ExchangeSetApiClient.GetProductVersionsAsync(ProductVersionData, accessToken: EssJwtToken);
            Assert.AreEqual(200, (int)apiResponse.StatusCode, $"Incorrect status code {apiResponse.StatusCode} is returned, instead of the expected 200.");

            updateNumber = updateNumber + 1;
            string updateNumberString = updateNumber.ToString();
            var batchId = await apiResponse.GetBatchId();
            string homeDirectoryPath = Config.EncHomeFolder;

            string countryCode = productName.Substring(0, 2);
            var filePath = GenerateFilePath(homeDirectoryPath, batchId, countryCode, productName, editionNumberString, updateNumberString);

            int filesCount = await FolderCheck.CheckIfDownloadFolderExistAndFileCount(filePath);

            Assert.AreEqual(2, filesCount, $"File count returned from folder {filesCount}, instead of expected count 2");
        }

        [Test]
        public async Task WhenICallTheApiWithInvalidEditionNumber_ThenLatestDownloadedFolderDoesNotExist()
        {
            List<ProductVersionModel> ProductVersionData = new List<ProductVersionModel>();
            var productName = "DE5NOBRK";

            int editionNumber = 50;
            string editionNumberString = editionNumber.ToString();

            int updateNumber = 0;
            
            ProductVersionData.Add(DataHelper.GetProductVersionModelData(productName, editionNumber, updateNumber));

            var apiResponse = await ExchangeSetApiClient.GetProductVersionsAsync(ProductVersionData, accessToken: EssJwtToken);
            Assert.AreEqual(200, (int)apiResponse.StatusCode, $"Incorrect status code {apiResponse.StatusCode} is returned, instead of the expected 200.");

            var batchId = await apiResponse.GetBatchId();
            string homeDirectoryPath = Config.EncHomeFolder;

            string countryCode = productName.Substring(0, 2);

            var filePath = Path.Combine(homeDirectoryPath, DateTime.UtcNow.ToString("ddMMMyyyy"), batchId, Config.ExchangeSetFileFolder, Config.EncRootFolder, countryCode, productName, editionNumberString);

            bool folderCheck = await FolderCheck.CheckIfDownloadFolderNotExist(filePath);

            Assert.False(folderCheck, $"Folder available for the product {productName}");
        }

        [Test]
        public async Task WhenICallTheApiWithInvalidUpdateNumber_ThenLatestDownloadedFolderDoesNotExist()
        {
            List<ProductVersionModel> ProductVersionData = new List<ProductVersionModel>();
            var productName = "DE5NOBRK";

            int editionNumber = 1;
            string editionNumberString = editionNumber.ToString();

            int updateNumber = 1;
            
            ProductVersionData.Add(DataHelper.GetProductVersionModelData(productName, editionNumber, updateNumber));

            var apiResponse = await ExchangeSetApiClient.GetProductVersionsAsync(ProductVersionData, accessToken: EssJwtToken);
            Assert.AreEqual(200, (int)apiResponse.StatusCode, $"Incorrect status code {apiResponse.StatusCode} is returned, instead of the expected 200.");

            var batchId = await apiResponse.GetBatchId();
            string homeDirectoryPath = Config.EncHomeFolder;

            string countryCode = productName.Substring(0, 2);
            var filePath = Path.Combine(homeDirectoryPath, DateTime.UtcNow.ToString("ddMMMyyyy"), batchId, Config.ExchangeSetFileFolder, Config.EncRootFolder, countryCode, productName, editionNumberString);

            bool folderCheck = await FolderCheck.CheckIfDownloadFolderNotExist(filePath);

            Assert.False(folderCheck, $"Folder available for the product {productName}");
        }
    }

}

