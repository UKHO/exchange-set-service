openapi: "3.0.0"
info:
  version: "0.2"
  title: Exchange Set Service API
  description: |
    This API is for the Exchange Set Service.
  contact:
    name: Martin Rock-Evans
    email: martin.rock-evans@ukho.gov.uk

externalDocs:
  url: https://github.com/UKHO/exchange-set-service

servers:
  - url: https://exchangeset.admiralty.co.uk/avcsData/[version]/

security:
  - jwtBearerAuth: []

paths:
  /productData/productIdentifiers:
    post:
      summary: Provide all the latest releasable baseline data for a specified set of ENCs.

      operationId: postProductIdentifiers

      description: |
        Given a list of ENC name identifiers, return all the versions of the ENCs that are releasable and that are needed to bring the ENCs up to date, namely the base edition and any updates or re-issues applied to it.   

        ## Business Rules:

        Only ENCs that are releasable at the date of the request will be returned.

        For cancellation updates, all the updates up to the cancellation need to be included. Cancellations will be included for 12 months after the cancellation, as per the S63 specification.

        If an ENC has a re-issue, then the latest batch on the FSS will be used. 

        If a requested ENC has been cancelled and replaced or additional coverage provided, then the replacement or additional coverage ENC will not be included in the response payload. Only the specific ENCs requested will be returned. The current UKHO services (Planning Station/Gateway) are the same, they only give the user the data they ask for (i.e. if they ask for a cell that is cancelled, they only get the data for the cell that was cancelled).

        If a requested ENC does not exist (it is not a valid ENC) then nothing for that ENC will be returned (i.e. the user is not informed it does not exist). If none of the requested ENCs exist, then a 'Bad Request' response will be returned.

      parameters:
        - $ref: "#/components/parameters/callbackUri"

      requestBody:
        description: |
          The JSON body containing product identifiers.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productIdentifiers"
            example: ["GB123456", "GB160060", "AU334550"]

      responses:
        "200":
          description: A JSON body that indicates the URL that the exchange set will be available on as well as the number of cells in that Exchange Set.
          headers:
            schema:
              $ref: "#/components/schemas/Last-Modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/exchangeSetResponse"

        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorDescription"

        "401":
          $ref: "#/components/responses/unauthorised"

        "403":
          $ref: "#/components/responses/forbidden"

        "429":
          $ref: "#/components/responses/tooManyRequests"

        "500":
          $ref: "#/components/responses/internalServerError"

  /productData/productVersions:
    post:
      summary: Given a set of ENC versions (e.g. Edition x Update y) provide any later releasable files.
      description: |
        Given a list of ENC name identifiers and their edition and update numbers, return all the versions of the ENCs that are releasable from that version onwards.

        ## Business Rules:

        If there is no update to the version that is requested, then nothing will be returned for the ENC.

        If none of the ENCs requested have an update, then a 'Not modified' response will be returned. If none of the ENCs requested exist, then a 'Bad Request' response will be returned.

        The rules around cancellation, replacements, additional coverage and re-issues apply as defined in the previous section.

      operationId: postProductVersions

      parameters:
        - $ref: "#/components/parameters/callbackUri"

      requestBody:
        description: |
          The JSON body containing product versions.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productVersions"

      responses:
        "200":
          description: |
            A JSON body that indicates the URL that the Exchange Set will be available on as well as the number of cells in that Exchange Set.

            If there are no updates for any of the productVersions, then the return will be a '200' response with an empty Exchange Set (containing just the latest PRODUCTS.TXT) and the exchangeSetCellCount will be 0.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/exchangeSetResponse"

        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorDescription"

        "401":
          $ref: "#/components/responses/unauthorised"

        "403":
          $ref: "#/components/responses/forbidden"

        "429":
          $ref: "#/components/responses/tooManyRequests"

        "500":
          $ref: "#/components/responses/internalServerError"

  /productData:
    post:
      summary: Provide all the releasable data after a datetime.
      description: |
        Given a datetime, build an Exchange Set of all the releasable ENC versions that have been issued since that datetime.

      operationId: getProducts

      parameters:
        - $ref: "#/components/parameters/sinceDateTime"
        - $ref: "#/components/parameters/callbackUri"

      responses:
        "200":
          description: |
            A JSON body that indicates the URL that the Exchange Set will be available on as well as the number of cells in that Exchange Set.

            If there are no updates since the sinceDateTime parameter, then a 'Not modified' response will be returned.
          headers:
            schema:
              $ref: "#/components/schemas/Last-Modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/exchangeSetResponse"

        "304":
          description: Not modified.
          headers:
            schema:
              $ref: "#/components/schemas/Last-Modified"

        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorDescription"

        "401":
          $ref: "#/components/responses/unauthorised"

        "403":
          $ref: "#/components/responses/forbidden"

        "429":
          $ref: "#/components/responses/tooManyRequests"

        "500":
          $ref: "#/components/responses/internalServerError"

  /callback:
    post:
      summary: Notify the Exchange Set requestor that this is now ready to download on the File Share Service.
      description: |
        Once the Exchange Set has been committed on File Share Service, a notification will be sent to the callbackURI (if specified).  

        ## Data:

        The data for the notification will follow the CloudEvents 1.0 standard, with the data portion containing the same Exchange Set data as the response to the original API request.

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/cloudEvent"
      responses:
        "200":
          description: The service will ignore all response from the callback.

components:
  ################################################################################
  #                              Parameter Definitions                              #
  ################################################################################

  parameters:
    sinceDateTime:
      in: query
      name: sinceDateTime
      required: true
      description: |
        The date and time from which changes are requested. Any changes since the date will be returned. The value should be the Last-Modified date returned by the last request to this operation. The date format follows RFC 1123.
      schema:
        type: string
        format: date-time
      example: Wed, 21 Oct 2015 07:28:00 GMT

    callbackUri:
      in: query
      name: callbackUri
      required: false
      description: An optional callback URI that will be used to notify the requestor once the requested Exchange Set is ready to download from the File Share Service. If not specified, then no call back notification will be sent.
      schema:
        type: string

  ################################################################################
  #                          Common Response Definitions                         #
  ################################################################################

  responses:
    unauthorised:
      description: Unauthorised - either you have not provided any credentials, or your credentials are not recognised.

    forbidden:
      description: Forbidden - you have been authorised, but you are not allowed to access this resource.

    tooManyRequests:
      description: The user has sent too many requests in a given amount of time. Please back-off for the time in the Retry-After header (in seconds) and try again.
      headers:
        Retry-After:
          schema:
            type: integer
          description: Specifies the time the user should wait in seconds before retrying.

    internalServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultErrorResponse"

  ################################################################################
  #                              Object Definitions                              #
  ################################################################################

  schemas:
    ####################################
    #      Request Objects      #
    ####################################

    href:
      type: string
      format: uri

    link:
      type: object
      properties:
        href:
          $ref: "#/components/schemas/href"

    productIdentifiers:
      type: array
      items:
        type: string

    productVersions:
      type: array
      items:
        type: object
        properties:
          productName:
            type: string
            description: The unique product identifiers.
          editionNumber:
            type: number
            description: The edition number.
          updateNumber:
            type: number
            description: The update number, if applicable.
      example:
        [
          { "productName": "AU895561", "editionNumber": 4, "updateNumber": 1 },
          { "productName": "GB100625", "editionNumber": 6, "updateNumber": 0 },
        ]

    ####################################
    #      Response Objects      #
    ####################################

    exchangeSetResponse:
      type: object
      properties:
        _links:
          type: object
          properties:
            exchangeSetBatchStatusUri:
              $ref: "#/components/schemas/link"
            exchangeSetFileUri:
              $ref: "#/components/schemas/link"
        exchangeSetUrlExpiryDateTime:
          type: string
          format: date-time
        exchangeSetCellCount:
          type: number

    Last-Modified:
      type: string
      format: date-time
      description: Returns the date and time the file was last modified. The date format follows RFC 1123.
      example: Wed, 21 Oct 2015 07:28:00 GMT

    ####################################
    #      Error Response Objects      #
    ####################################

    DefaultErrorResponse:
      type: object
      title: Error
      properties:
        correlationId:
          type: string
        detail:
          type: string

    errorDescription:
      type: object
      properties:
        correlationId:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/fieldError"

    fieldError:
      type: object
      properties:
        source:
          type: string
        description:
          type: string

    cloudEvent:
      description: For the full specification, see https://github.com/cloudevents/spec/blob/v1.0/spec.md
      externalDocs:
        description: Event publishing based on Cloud Events.
        url: https://github.com/cloudevents/spec/blob/v1.0/spec.md
      required:
        - id
        - source
        - specversion
        - type
      type: object
      properties:
        id:
          type: string
          description: Identifies the event. Producers MUST ensure that source + id is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same id. Consumers MAY assume that events with identical source and id are duplicates. Examples include an event counter maintained by the producer or A UUID
        source:
          type: string
          format: uri
          description: |
            Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.

            Producers MUST ensure that source + id is unique for each distinct event.

            An application MAY assign a unique source to each distinct producer that makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique source identifiers.

            A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that source + id is unique for each distinct event.

            Constraints
              * REQUIRED
              * MUST be a non-empty URI-reference
              * An absolute URI is RECOMMENDED

            examples
              * Internet-wide unique URI with a DNS authority
              * https://github.com/cloudevents
              * mailto:cncf-wg-serverless@lists.cncf.io
              * Universally-unique URN with a UUID:
              * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
              * Application-specific identifiers
              * /cloudevents/spec/pull/123
              * /sensors/tn-1234567/alerts
              * 1-555-123-4567
        specversion:
          type: string
          description: The version of the CloudEvents specification that the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.
        "type":
          type: string
          description: |
            This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see Versioning of Attributes in the Primer for more information.

            Constraints
              * REQUIRED
              * MUST be a non-empty string
              * SHOULD be prefixed with a reverse-DNS name (uk.gov.ukho). The prefixed domain dictates the organization which defines the semantics of this event type.

            Examples
              * uk.gov.ukho.encpublishing.newedition
              * uk.gov.ukho.ordering.neworder
        datacontenttype:
          type: string
          format: RFC 2046
          description: |
            Content type of data value. This attribute enables data to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the JSON envelope format might carry an XML payload in data, and the consumer is informed by this attribute being set to "application/xml". The rules for how data content is rendered for different datacontenttype values are defined in the event format specifications; for example, the JSON event format defines the relationship in section 3.1.
            For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol
            In some event formats the datacontenttype attribute MAY be omitted. For example, if a JSON format event has no datacontenttype attribute, then it is implied that the data is a JSON value conforming to the "application/json" media type. In other words; a JSON-format event with no datacontenttype is exactly equivalent to one with datacontenttype="application/json".
            When translating an event message with no datacontenttype attribute to a different format or protocol binding, the target datacontenttype SHOULD be set explicitly to the implied datacontenttype of the source.
                        
            Constraints
              * If present, MUST adhere to the format specified in RFC 2046 https://tools.ietf.org/html/rfc2046

            Examples
              * For Media Type examples see IANA Media Types http://www.iana.org/assignments/media-types/media-types.xhtml
        dataschema:
          type: string
          format: URI
          description: |
            Identifies the schema that data adheres to. Incompatible changes to the schema SHOULD be reflected by a different URI. See Versioning of Attributes in the Primer for more information.

            Constraints
              * If present, MUST be a non-empty URI
        subject:
          type: string
          description: |
            This describes the subject of the event in the context of the event producer (identified by source). In publish-subscribe scenarios, a subscriber will typically subscribe to events emitted by a source, but the source identifier alone might not be sufficient as a qualifier for any specific event if the source context has internal sub-structure.

            Identifying the subject of the event in context metadata (opposed to only in the data payload) is particularly helpful in generic subscription filtering scenarios where middleware is unable to interpret the data content. In the above example, the subscriber might only be interested in blobs with names ending with '.jpg' or '.jpeg' and the subject attribute allows for constructing a simple and efficient string-suffix filter for that subset of events.

            Constraints
              * If present, MUST be a non-empty string

            Example
              * A subscriber might register interest for when new blobs are created inside a blob-storage container. In this case, the event source identifies the subscription scope (storage container), the type identifies the "blob created" event, and the id uniquely identifies the event instance to distinguish separate occurrences of a same-named blob having been created; the name of the newly created blob is carried in subject
              
                source: https://example.com/storage/tenant/container
                subject: mynewfile.jpg
        time:
          type: string
          format: date-time
          description: |
            Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same source MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
        data:
          type: object
          description: |
            The event payload. This specification does not place any restriction on the type of this information. It is encoded into a media format which is specified by the datacontenttype attribute (e.g. application/json), and adheres to the dataschema format when those respective attributes are present.

            The `uk.co.admiralty.avcsData.exchangeSetCreated.v1` event payload is described by "#/components/schemas/exchangeSetResponse"
          allOf:
            - $ref: "#/components/schemas/exchangeSetResponse"
      example:
        specversion: "1.0"
        type: "uk.co.admiralty.avcsData.exchangeSetCreated.v1"
        source: " https://exchangeset.admiralty.co.uk/avcsData"
        id: "2f03a25f-28b3-46ea-b009-5943250a9a41"
        time: "2021-02-17T14:04:04.4880776Z"
        subject: "Requested AVCS Exchange Set Created"
        datacontenttype: "application/json"
        data:
          _links:
            exchangeSetBatchStatusUri:
              href: "http://fss.ukho.gov.uk/batch/7b4cdf10-adfa-4ed6-b2fe-d1543d8b7272"
            exchangeSetFileUri:
              href: "http://fss.ukho.gov.uk/batch/7b4cdf10-adfa-4ed6-b2fe-d1543d8b7272/files/exchangeset123.zip"
          exchangeSetUrlExpiryDateTime: "2021-02-17T16:19:32.269Z"
          exchangeSetCellCount: 25

    ####################################
    #      Security Objects      #
    ####################################

  securitySchemes:
    jwtBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
