parameters:
  - name: ContinueEvenIfResourcesAreGettingDestroyed
    type: boolean
    default: false
  - name: AzureSubscription
    type: string

steps:
  - task: FileTransform@2
    displayName: "File Transform: Ess Config" #Replace exchange set instance value from pipeline 
    inputs:
      folderPath: '$(Pipeline.Workspace)/terraformartifact/src'
      xmlTransformationRules:
      jsonTargetFiles: '**/appsettings.json'

  - task: powershell@2
    displayname: "terraform devdeploy"
    inputs:
      targetType: filepath
      filePath: '$(pipeline.workspace)/terraformartifact/terraform_conditional_run.ps1'
      arguments: '-deploymentresourcegroupname $(deploymentresourcegroupname) -deploymentstorageaccountname $(deploymentstorageaccountname) -workspace $(environment) -continueevenifresourcesaregettingdestroyed $${{ parameters.continueevenifresourcesaregettingdestroyed }} -terraformjsonoutputfile $(pipeline.workspace)/terraformartifact/terraform_output.json -elasticapmserverurl $(elasticapm.serverurl) -elasticapmapikey $(elasticapm.apikey)'
    env:
      arm_client_id: $(terraform-client-id)
      arm_client_secret: $(terraform-client-secret)
      arm_tenant_id: $(terraform-tenant-id)
      arm_subscription_id: $(terraform-subscription-id)
      tf_var_allowed_ips: $(whitelistedips)
      tf_var_spoke_rg: $(spokerg)
      tf_var_spoke_vnet_name: $(spokevnetname)
      tf_var_spoke_subnet_name: $(spokesubnetname)
      tf_var_agent_rg: $(agentrg)
      tf_var_agent_vnet_name: $(agentvnetname)
      tf_var_agent_subnet_name: $(agentsubnetname)
      tf_var_agent_subscription_id: $(agentsubscriptionid)

  # - task: FileTransform@2
  #   displayName: "File Transform: WebJob"
  #   inputs:
  #     folderPath: '$(Pipeline.Workspace)/ExchangeSetService/*.zip'
  #     xmlTransformationRules:
  #     jsonTargetFiles: '**/appsettings.json'

  # - task: AzureCLI@2
  #   displayName: "Azure Fulfilment Webjob Deployment"
  #   inputs:
  #     azureSubscription: "${{ parameters.AzureSubscription }}"
  #     scriptType: 'pscore'
  #     scriptLocation: 'scriptPath'
  #     scriptPath: '$(Pipeline.Workspace)/terraformartifact/fulfilment_webjob_deployment.ps1'
  #     arguments: '-terraformJsonOutputFile $(Pipeline.Workspace)/terraformartifact/terraform_output.json -packagePath "$(Pipeline.Workspace)/ExchangeSetService" -packageName "ExchangeSetFulFilmentService.zip"'


  # - task: FileTransform@2
  #   displayName: "File Transform: WebAppSettings"
  #   inputs:
  #     folderPath: '$(Pipeline.Workspace)/ExchangeSetServiceWebAPI/*.zip'
  #     xmlTransformationRules:
  #     jsonTargetFiles: '**/appsettings.json'

  # - task: AzureWebApp@1
  #   displayName: "Azure App Deploy: ess-$(Environment)-webapp to Staging slot"
  #   inputs:
  #     azureSubscription: "${{ parameters.AzureSubscription }}"
  #     appType: webApp
  #     appName: "$(WEB_APP_NAME)"
  #     package: "$(Pipeline.Workspace)/ExchangeSetServiceWebAPI/UKHO.ExchangeSetService.API.zip"
  #     deployToSlotOrASE: true
  #     slotName: $(WEB_APP_SLOT_NAME)

  # - task: AzureAppServiceManage@0
  #   displayName: "Swap with production slot"
  #   inputs:
  #     azureSubscription: "${{ parameters.AzureSubscription }}"
  #     resourceGroupName: $(RESOURCE_GROUP_NAME)
  #     webAppName: $(WEB_APP_NAME)
  #     action: "Swap Slots"
  #     swapWithProduction: true
  #     sourceSlot: $(WEB_APP_SLOT_NAME)  

  # - task: PowerShell@2
  #   displayName: "Check the status of production slot"
  #   inputs:
  #     targetType: filePath
  #     filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
  #     arguments: "-healthEndPointUrl $(EssApiUrl)/health -waitTimeInMinute $(waitTimeInMinute) -onErrorContinue 1"

  # - task: AzureAppServiceManage@0
  #   displayName: "Swap with production slot - Rollback"
  #   condition: and(succeeded(), eq(variables['IS_HEALTHY'], 'false'))
  #   inputs:
  #     azureSubscription: "${{ parameters.AzureSubscription }}"
  #     resourceGroupName: $(RESOURCE_GROUP_NAME)
  #     webAppName: $(WEB_APP_NAME)
  #     action: "Swap Slots"
  #     swapWithProduction: true
  #     sourceSlot: $(WEB_APP_SLOT_NAME)  

  # - task: PowerShell@2
  #   displayName: "Check the status of production slot after rollback"
  #   condition: and(succeeded(), eq(variables['IS_HEALTHY'], 'false'))
  #   inputs:
  #     targetType: filePath
  #     filePath: "$(Pipeline.Workspace)/terraformartifact/check_service_status.ps1"
  #     arguments: "-healthEndPointUrl $(EssApiUrl)/health -waitTimeInMinute $(waitTimeInMinute) -onErrorContinue 0"
